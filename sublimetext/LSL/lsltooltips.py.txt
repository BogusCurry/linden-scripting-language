####
#       Tooltips don't work, yet. Any help to get this to work
#       is highly appreciated.
####


import sublime, sublime_plugin
import sys
from time import time
import webbrowser
import xml.etree.ElementTree as etree

# keep python 2 from trying

kwdb = "kwdb"
css = "css"

def plugin_loaded():
    global kwdb
    kwdb = etree.parse('other/kwdb/kwdb.xml')
    global css
    css = """
            html {background-color: #232628; color: #CCCCCC; }
            body {font-size: 12px; }
            a {color: #6699cc; }
            b {color: #cc99cc; }
            h1 {color: #99cc99; font-size: 14px; }
          """

class LSLTooltipListener(sublime_plugin.EventListener):

    next_run_time = 0

#   check if editing a lsl file

    def on_activated(self, view):
        self._check_tooltip_after_delay(view)

    def on_modified(self, view):
        self._check_tooltip_after_delay(view)

    def on_selection_modified(self, view):
        self._check_tooltip_after_delay(view)

    def _check_tooltip_after_delay(self, view):
        timeout_ms = 400
        self.next_run_time = time() + 0.0009 * timeout_ms
        sublime.set_timeout(lambda:self._check_tooltip_after_delay_callback(view), timeout_ms)

    def _check_tooltip_after_delay_callback(self, view):
        if self.next_run_time <= time():
            self._check_tooltip(view)

    def on_navigate(self, link):
        webbrowser.open_new_tab('https://wiki.secondlife.com/w/index.php?search=' + link + '&Go=go')
        self.view.hide_popup()

#   sync toggle with autocomplete dropdown
#   only show tooltip when selecting one item in autocomplete dropdown
#   or on hover
#   or when cursor in word

    def _check_tooltip(self, view, update=False):
        global kwdb
        global css
        for region in view.sel():
            word = view.substr(view.word(region.begin()))
            if len(word) > 2:
                for result in kwdb.getroot().findall(".//[@name='" + word + "']"):
                    result_name = result.get('name')
                    result_status = result.get('status')
                    if result.tag is 'function' or 'constant':
                        result_type = result.get('type')
                    if result.tag is 'constant':
                        result_value = result.get('value')
                    result_description = result.find('description').text

#   for each overload
#   ...

                html = ['<style>%s</style>' % css]

#   ... '<br>'.join(results)

                html.append(result)

                if update:
                    self.view.update_popup(''.join(html))
                else:
                    self.view.show_popup(
                        ''.join(html),
                        flags=sublime.HTML,
                        sublime.COOPERATE_WITH_AUTO_COMPLETE,
                        on_navigate=on_navigate(word)
                    )
                return
        self.view.hide_popup()
